%%%-------------------------------------------------------------------
%%% @author uralovegor
%%% @copyright (C) 2021, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 20. Feb 2021 11:51 AM
%%%-------------------------------------------------------------------
-module(the_module).
-author("uralovegor").

%% API
-export([greet_and_add_two/1]). %% определяет какие ф-ции модуля доступны снаружи
%%              принимает список ф-ция и их арностей.
%%              Арность - целое число, указывает, сколько можно передать
%%              параметров
%%              Экспортированные ф-ции представляют интерфейс модуля
%%              т.е. тут выставляется наружу то, что нужно для работы
%%              но кишки прячутся

%% модуль - это набор фцнкций собранных вместе в один файл
%% при написании модуля можно объявнить внутри него фции и атрибуты
%% достаточно одного атрибута, что бы модуль был скомпилирован
%%-module(modules). этот атрибут всегда ставится первым. это атом, который будет
%% использоваться для вызова функций из других  модулей
%% название должно совпадать с названием файла

%% имя_фции(аргумент) -> тело .
greet_and_add_two(X) ->
  hello(), % разделяются запятыми
  add(X, 2)
  % нет слова return - последнее выражение ф-ции и есть результат
  . % точка в конце

add(A, B) ->
  A + B
  .

hello() ->
  io:format("Hello! ~n").

%% код компайлится в байткод для загрузи в эрланг вм
%% самый простой способ вызвать его
%%
%% erlc флаги file.erl
%%
%% из интерпретатора или другого модуля вызвать его можно
%% compile:file(имя_файла)
%% либо c(имя_модуля).

% после компиляции появится файл .beam - это скомпилированный модуль
% Есть множество флагов, самые используемые:
%% - debug_info
%% - outdir - место для beam файла
%% - export_all - игнорит export и эспортирует все ф-ции. Не используют в проде
%% - {d, Макро} {d, Макро, Значение} - определяет макрос на время компиляции, Макрос - это атом
%%                                    используется для модульного тестирования, по умолчанию true
%%                                    если незаданно значение
%%  compile:file(module_name, [debug_infо,  export_all]).
%% или
%% c(useless, [debug_info, export_all]).
%% либо можно задать это как атрибут модуля
-compile([debug_info, export_all]).
%% теперь при компилции будут использованы флаги  export_all и debug_info

